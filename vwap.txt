// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© oatmealtrex
// for TradingView

//@version=4
study(title="VWAP v3", shorttitle="VWAP v3", overlay=true)


computeVWAP(src, isNewPeriod, stDevMultiplier) =>
	var float sumSrcVol = na
	var float sumVol = na
    var float sumSrcSrcVol = na
    
	sumSrcVol := isNewPeriod ? src * volume : src * volume + sumSrcVol[1]
	sumVol := isNewPeriod ? volume : volume + sumVol[1]
	// sumSrcSrcVol calculates the dividend of the equation that is later used to calculate the standard deviation
	sumSrcSrcVol := isNewPeriod ? volume * pow(src, 2) : volume * pow(src, 2) + sumSrcSrcVol[1]
	
	_vwap = sumSrcVol / sumVol
	variance = sumSrcSrcVol / sumVol - pow(_vwap, 2)
	variance := variance < 0 ? 0 : variance
	stDev = sqrt(variance)
	
	lowerBand = _vwap - stDev * 1
	upperBand = _vwap + stDev * 1
	lowerBand2 = _vwap - stDev * 2.2
	upperBand2 = _vwap + stDev * 2.2
	lowerBand3 = _vwap - stDev * 3
	upperBand3 = _vwap + stDev * 3
	
	[_vwap, lowerBand, upperBand,lowerBand2, upperBand2,lowerBand3, upperBand3]

hideonDWM = input(true, title="Hide VWAP on 1D or Above", group="VWAP Settings")
var anchor = input(defval = "Session", title="Anchor Period", type=input.string, 
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", type = input.source, defval = hlc3, group="VWAP Settings")
offset = input(0, title="Offset", group="VWAP Settings")

showBands = input(true, title="Calculate Bands", group="Standard Deviation Bands Settings")
stdevMult = input(1.0, title="Bands Multiplier", group="Standard Deviation Bands Settings")

timeChange(period) =>
	change(time(period))

new_earnings = earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on)
new_dividends = dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on)
new_split = splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on)

isNewPeriod = anchor == "Earnings" ? new_earnings :
 anchor == "Dividends" ? new_dividends :
 anchor == "Splits" ? new_split :
 na(src[1]) ? true :
 anchor == "Session" ? timeChange("D") :
 anchor == "Week" ? timeChange("W") :
 anchor == "Month" ? timeChange("M") :
 anchor == "Quarter" ? timeChange("3M") :
 anchor == "Year" ? timeChange("12M") :
 anchor == "Decade" ? timeChange("12M") and year % 10 == 0 :
 anchor == "Century" ? timeChange("12M") and year % 100 == 0 :
 false
	
float vwapValue = na
float std = na
float upperBandValue = na
float lowerBandValue = na
float upper2BandValue = na
float lower2BandValue = na
float upper3BandValue = na
float lower3BandValue = na


is1to5Min = (timeframe.period == "1" or timeframe.period == "3" or timeframe.period == "5" or timeframe.period == "10" or timeframe.period == "15" )

if not (hideonDWM and not is1to5Min)
    [_vwap, bottom, top,bottom2,top2,bottom3,top3] = computeVWAP(src, isNewPeriod, stdevMult)
    vwapValue := _vwap
    upperBandValue := showBands ? top : na
    lowerBandValue := showBands ? bottom : na
    upper2BandValue := showBands ? top2 : na
    lower2BandValue := showBands ? bottom2 : na
    upper3BandValue := showBands ? top3 : na
    lower3BandValue := showBands ? bottom3 : na







// 1. Calculating vwapValue's rate of change 
k_num = input(defval=1, title="The number of candlesticks", minval=1, maxval=14, type=input.integer, step=1, group="Line color control", 
     tooltip="Calculate the average of the rate of change of the VWAP value of the number of bars, which is equivalent to using the number of bars to weight the time")
change_rate_threshold = input(defval=0.3, title="Rate of change threshold", minval=0.1, maxval=4.0, type=input.float, step=0.01, group="Line color control", 
     tooltip="The threshold of the color change of the line, the change rate of the VWAP value is larger or smaller than this to change the color, otherwise the original color will continue")
change_rate = (vwapValue - nz(vwapValue[1], 0)) / atr(14)

// 2. Controlling Line's color based on the average change rate against ATR
change_rate_avg = 0.0
var color_flag = 1

// 3. Calculating average change rate in the past k-lines
for i = 0 to (k_num - 1)
    change_rate_avg := change_rate_avg + change_rate[i]
change_rate_avg := change_rate_avg / k_num

if color_flag == 1 and change_rate_avg > -change_rate_threshold
    color_flag := 1
if color_flag == 1 and change_rate_avg <= -change_rate_threshold
    color_flag := 0
if color_flag == 0 and change_rate_avg >= change_rate_threshold
    color_flag := 1
if color_flag == 0 and change_rate_avg < change_rate_threshold
    color_flag := 0


lineTransp = 55

vwapBand = plot(vwapValue, title="VWAP", color=color_flag == 1 ? color.new(#7e9e08,15) : color.new(#ff0000, 2), offset=offset, linewidth=3)

upperBand = plot(upperBandValue, title="Upper Band", color=color.new(color.green,lineTransp), offset=offset)
lowerBand = plot(lowerBandValue, title="Lower Band", color=color.new(color.green,lineTransp), offset=offset)
upperBand2 = plot(upper2BandValue, title="Upper2 Band", color=color.new(color.orange,lineTransp), offset=offset)
lowerBand2 = plot(lower2BandValue, title="Lower2 Band", color=color.new(color.orange,lineTransp), offset=offset)
upperBand3 = plot(upper3BandValue, title="Upper3 Band", color=color.new(color.red,lineTransp), offset=offset)
lowerBand3 = plot(lower3BandValue, title="Lower3 Band", color=color.new(color.red,lineTransp), offset=offset)





hilight3h = close > upper2BandValue ? color.new(color.green, 90) : na
hilight2h = close > upperBandValue and close < upper2BandValue ? color.new(color.green, 90) : na
hilight1h = close > vwapValue and close < upperBandValue ? color.new(color.green, 90) : na
hilight1l = close < vwapValue and close > lowerBandValue ? color.new(color.green, 90) : na
hilight2l = close < lowerBandValue and close > lower2BandValue ? color.new(color.green, 90) : na
hilight3l = close < lower2BandValue ? color.new(color.green, 90) : na

// TEST 1st section
// Variables for Conditions

percentLong = round(( (close - lower3BandValue) / (upper3BandValue - lower3BandValue)) * 100,2)
rangeHeight = upper3BandValue - lower3BandValue
stalledRange = (hour > 1 and (rangeHeight < 750))


bandsSize = round(( (lower3BandValue - upper3BandValue) / lower3BandValue) * 100,2)





pctgainlabel9 = label.new(timenow + 1000000, upper3BandValue, xloc = xloc.bar_time, text = " "+tostring(round(bandsSize,1))+ "%", color = color.white, style=label.style_none,size=size.normal, textcolor = color.white)
label.delete(pctgainlabel9[1])

btcAmt = 0.1
pctSinceLower2 = round(( (close - lower2BandValue) / lower2BandValue) * 100,2)
gainSinceLower2 = ( (close - lower2BandValue) / lower2BandValue) * btcAmt

gainSinceLower = label.new(timenow + 1000000, lower2BandValue, xloc = xloc.bar_time, text = " "+tostring(round(pctSinceLower2,1))+ "% " + "("+ tostring(round(gainSinceLower2,4)) + ")", color = color.white, style=label.style_none,size=size.normal, textcolor = color.white)
label.delete(gainSinceLower[1])

// plot(percentLong, color=color.yellow)

//Consecutive crosses
lower3Cross = cross(close,lower3BandValue)
lower2Cross = cross(close,lower2BandValue)
lowerCross = cross(close,lowerBandValue)
vwapCross = cross(close,vwapValue)
upperCross = cross(close,upperBandValue)
upper2Cross = cross(close,upper2BandValue)
upper3Cross = cross(close,upper3BandValue)







// SET UP LONG and SHORT CONDITIONS
lastUpper2Cross = barssince(crossover(close,upper2BandValue))
lastLower2Cross = barssince(crossover(close,lower2BandValue))

lastLower2Touch = barssince(low < lower2BandValue)
longCond2 = crossover(close,upperBandValue) and   (lastUpper2Cross >  lastLower2Cross )
shortCond2 = crossunder(close,lowerBandValue) and   (lastLower2Cross >  lastUpper2Cross )

priceDrop =  barssince((close[1] > open[1]) and close[1] >= open and (open > close))

longCondPriceDrop = priceDrop > .8 ?  (open[priceDrop] - close ) > 350 ? close : na : na


// plotshape(longCondPriceDrop, title=".", text=".", textcolor=color.white, style=shape.labelup, location=location.belowbar, color=color.purple, transp=0, size=size.tiny)


minOuterBarHeight = input(1, title="Minimum Outer Bar Height (in pct)", group="VWAP Settings")
outerBandHeight = (  ( (upper2BandValue - lower2BandValue) / close) * 100 )



longCond =   ( (outerBandHeight > minOuterBarHeight)  and (percentLong <=25 or (close < lower2BandValue  and barstate.isrealtime) or low  < lower2BandValue  or(longCond2)    ))

// longCond =  (lastLower2Touch < 200  and lastLower2Touch > 2) and ( (  (upper2BandValue - lower2BandValue) > 200)  and (percentLong <=25 or (close < lower2BandValue  and barstate.isrealtime) or low  < lower2BandValue  or(longCond2)    )) and stalledRange == false and (hour >= 1 )

// shortCond =( (( high - low[barssince(longCond)])/ low[barssince(longCond)]) *1000) > 10
shortCond =   ( (outerBandHeight > minOuterBarHeight)  and ( (close > upper2BandValue  and barstate.isrealtime) or close  > upper2BandValue     )) 


CondInit = 0
CondInit := longCond ? 1 : shortCond ? -1 : CondInit[1]
longCondition = longCond and CondInit[1] == -1
shortCondition = shortCond and CondInit[1] == 1








// Current Profit
currentProfit = 0.0
currentPctProfit = 0.0
barsSinceLl = 0

barsSinceLl := barssince(longCondition or shortCondition)


if CondInit[1] == 1
    currentProfit := close[0] - close[barsSinceLl]

if CondInit[1] == -1
    currentProfit := close[barsSinceLl] - close








// Print Buy / Sell labels

longLabel = longCondition ? close : na
shortLabel = shortCondition ? close : na



// // Execute Strategy / backtesting
// if longCondition
//     strategy.entry("buy", strategy.long, 1, when=strategy.position_size <= 0,comment="Long2")

// if shortCondition
// 	strategy.close("buy")






plotshape(shortLabel, title=".", text=".", textcolor=color.white, style=shape.circle, location=location.abovebar, color=color.red, transp=0, size=size.tiny)
alertcondition(shortLabel, title="Short", message='Short')


plotshape(longLabel, title="long", text="Long", textcolor=color.white, style=shape.labelup, location=location.belowbar, color=color.green, transp=0, size=size.tiny)
alertcondition(longLabel, title="Long", message='Long')






